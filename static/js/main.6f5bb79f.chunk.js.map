{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","potato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWA+DA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,0BAAMF,UAAU,eAAeE,EAA/B,KAoBOC,MArDf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,kBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,kBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAEjE,yBAAKP,UAAU,mBACX,kBAAC,IAAD,CACIS,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCqCjBC,E,2MAjEXC,MAAQ,G,EAORC,cAAgB,WAWZ,OAVe,EAAKD,MAAME,OAAOX,KAAI,SAACY,EAAOX,GAEzC,OADAY,QAAQC,IAAIF,GACL,kBAAC,EAAD,CACPnB,MAAOmB,EAAMG,cACbzB,OAAQsB,EAAMI,mBACdd,IAAKU,EAAMK,GACXnB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAMxBmB,W,sBAAa,4BAAAC,EAAA,sEACY,EAAKC,WADjB,OACHT,EADG,OAET,EAAKU,SAAS,CACVV,WAHK,2C,EAQbS,SAAW,WACP,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,iIA7B3BC,KAAKX,e,+BAgCE,IACEP,EAAWkB,KAAKpB,MAAhBE,OACR,OACI,yBAAKjB,UAAWiB,EAAS,MAAQ,gBAmBzBA,EAASkB,KAAKnB,gBAAkB,e,GA9ElCoB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.6f5bb79f.chunk.js","sourcesContent":["import React from 'react'; //클래스 컴포넌트 사용할때 : import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n/*\r\nclass Movie extends Component{\r\n    // App.js 에 있는 props에 원하는 값을 출력하고 싶을때 \r\n    // React.PropTypes는 15.5.0부터 사용되지않음, 터미널에서 yarn add prop-type 를 통해 설치후 PropTypes를 불러와야함\r\n    // (ex:영화 제목에 숫자만 출력되는건 원치않음, 포스터에 출력되는 값이 숫자나 true/false 같은 값이 도는걸 원치않음)\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,  // 부모컴포넌트(App)가 String을 보내면 Proptypes로 string 이라는것을 체크하여 아니라면 에러메세지\r\n        poster: PropTypes.string.isRequired // isRequired 하면 movie컴포넌트는 poster 라는 prop을 제공하는것이 필수로 설정\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <MoviePoster poster={this.props.poster} title={this.props.title}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt={this.props.title + \" 포스터\"} />\r\n        );\r\n    }\r\n}\r\n\r\n*/\r\n\r\n// 위 컴포넌트를 아래의 functional 컴포넌르로 변경\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.string.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// #10까지 완료\n\n\nclass App extends Component {\n    // Lifecycle 꼭알아둘것. 리액트는 무조건 이과정으로 진행됨 (console.log를 찍어 순서를 확인할수있음)\n    // Render: componenetWillMount() -> render () -> componentDidMount()\n        /*\n            1. componenetWillMount() : // will mount를 진행할때 api에 작업을 요청 (사이클이 시작됨을 알게됨)\n            2. render() : 해당 작업수행이 완료되면 데이터관련된 작업을 수행 (컴포넌트가 리액트시계에 '존재'하게 됨을 알게됨)\n            3. componentDidMount() : (성공적으로 리액트 세계에 컴포넌트가 자리잡았음을 알게됨)\n        */\n    // Update: componenetWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> compnenet\n        /*  1. componenetWillReceiveProps() : 컴포넌트가 새로운 props를 받음\n            2. shouldComponentUpdate() : 리액트는 old props, 새로운 props를 살펴본다음 이전과 새로운 props가 다르면 리액트는 'update = true\"라고 생각하고 다음단계로 넘어감\n            3. componentWillUpdate() :  (활용 :업데이트를 수행할때 어플리케이션에 '로딩중'를 붙일수있음)\n            4. render() : \n            5. componentDidUpdate() :  (활용: 업데이트 끝난후 '로딩중'을 숨김)\n        */\n\n    componentWillMount(){\n        \n    }\n\n    state = { // 컴포넌트의 state 가 바뀔때마다 render가 발생\n    }\n\n    componentDidMount() {\n       this._getMovies();\n    }\n\n    _renderMovies = () => {\n        const movies = this.state.movies.map((movie, index) => {\n            console.log(movie)\n            return <Movie \n            title={movie.title_english}\n            poster={movie.medium_cover_image}\n            key={movie.id} \n            genres={movie.genres} \n            synopsis={movie.synopsis}\n            />\n        })\n        return movies\n    }\n\n    _getMovies = async () => {\n        const movies = await this._callApi()\n        this.setState({\n            movies\n        })\n\n    }\n\n    _callApi = () => {\n        return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n        .then(potato => potato.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err))\n    }\n    \n    render() {\n        const { movies } = this.state;\n        return(\n            <div className={movies ? \"App\" : \"App--loading\"}>\n                {/* 주석용 괄호\n                    <Movie\n                        title={movies[0].title} poster={movies[0].poster}\n                        title={movies[1].title} poster={movies[1].poster}\n                        title={movies[2].title} poster={movies[2].poster}\n                        .\n                        .\n                        .\n                        \n                        - 위 map 코드는 이것을 리스트(배열)로 만든것\n                        - 리액트는 엘리먼트가 많을경우 고유(unique)한 key를 줘야함 (없을경우 콘솔에러)\n                    /> \n                    */\n                }\n                {/* this.state.movies.map((movie, index) => {\n                    return <Movie title={movie.title} poster={movie.poster}  key={index} />\n                })*/}\n                {\n                    movies ? this._renderMovies() : 'Loading' // this.state.movies 가 있으면 _renderMovies를 실행, 아니면 로딩\n                } \n            </div>\n        );\n    }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}